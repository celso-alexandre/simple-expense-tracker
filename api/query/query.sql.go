// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
)

const createExpensePlan = `-- name: CreateExpensePlan :one
INSERT INTO expense_plan (
   title,
   category,
   amount_planned,
   recurrency_type,
   created_at,
   updated_at
) VALUES (
   $1,
   $2,
   $3,
   $4,
   NOW(),
   NOW()
)
RETURNING expense_plan_id, title, amount_planned, first_payment_date, last_payment_date, last_paid_date, last_amount_spent, paid_count, recurrency_type, recurrency_interval, category, created_at, updated_at
`

type CreateExpensePlanParams struct {
	Title          string
	Category       NullExpensePlanCategory
	AmountPlanned  int32
	RecurrencyType NullRecurrencyType
}

func (q *Queries) CreateExpensePlan(ctx context.Context, arg CreateExpensePlanParams) (ExpensePlan, error) {
	row := q.db.QueryRow(ctx, createExpensePlan,
		arg.Title,
		arg.Category,
		arg.AmountPlanned,
		arg.RecurrencyType,
	)
	var i ExpensePlan
	err := row.Scan(
		&i.ExpensePlanID,
		&i.Title,
		&i.AmountPlanned,
		&i.FirstPaymentDate,
		&i.LastPaymentDate,
		&i.LastPaidDate,
		&i.LastAmountSpent,
		&i.PaidCount,
		&i.RecurrencyType,
		&i.RecurrencyInterval,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExpensePlan = `-- name: GetExpensePlan :one
SELECT expense_plan_id, title, amount_planned, first_payment_date, last_payment_date, last_paid_date, last_amount_spent, paid_count, recurrency_type, recurrency_interval, category, created_at, updated_at FROM expense_plan WHERE expense_plan_id = $1
`

func (q *Queries) GetExpensePlan(ctx context.Context, expensePlanID int32) (ExpensePlan, error) {
	row := q.db.QueryRow(ctx, getExpensePlan, expensePlanID)
	var i ExpensePlan
	err := row.Scan(
		&i.ExpensePlanID,
		&i.Title,
		&i.AmountPlanned,
		&i.FirstPaymentDate,
		&i.LastPaymentDate,
		&i.LastPaidDate,
		&i.LastAmountSpent,
		&i.PaidCount,
		&i.RecurrencyType,
		&i.RecurrencyInterval,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExpensePlans = `-- name: ListExpensePlans :many
SELECT expense_plan_id, title, amount_planned, first_payment_date, last_payment_date, last_paid_date, last_amount_spent, paid_count, recurrency_type, recurrency_interval, category, created_at, updated_at FROM expense_plan
`

func (q *Queries) ListExpensePlans(ctx context.Context) ([]ExpensePlan, error) {
	rows, err := q.db.Query(ctx, listExpensePlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExpensePlan
	for rows.Next() {
		var i ExpensePlan
		if err := rows.Scan(
			&i.ExpensePlanID,
			&i.Title,
			&i.AmountPlanned,
			&i.FirstPaymentDate,
			&i.LastPaymentDate,
			&i.LastPaidDate,
			&i.LastAmountSpent,
			&i.PaidCount,
			&i.RecurrencyType,
			&i.RecurrencyInterval,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpensePlan = `-- name: UpdateExpensePlan :one
UPDATE expense_plan SET
   title = $1,
   category = $2,
   amount_planned = $3,
   recurrency_type = $4,
   updated_at = NOW()
WHERE expense_plan_id = $5
RETURNING expense_plan_id, title, amount_planned, first_payment_date, last_payment_date, last_paid_date, last_amount_spent, paid_count, recurrency_type, recurrency_interval, category, created_at, updated_at
`

type UpdateExpensePlanParams struct {
	Title          string
	Category       NullExpensePlanCategory
	AmountPlanned  int32
	RecurrencyType NullRecurrencyType
	ExpensePlanID  int32
}

func (q *Queries) UpdateExpensePlan(ctx context.Context, arg UpdateExpensePlanParams) (ExpensePlan, error) {
	row := q.db.QueryRow(ctx, updateExpensePlan,
		arg.Title,
		arg.Category,
		arg.AmountPlanned,
		arg.RecurrencyType,
		arg.ExpensePlanID,
	)
	var i ExpensePlan
	err := row.Scan(
		&i.ExpensePlanID,
		&i.Title,
		&i.AmountPlanned,
		&i.FirstPaymentDate,
		&i.LastPaymentDate,
		&i.LastPaidDate,
		&i.LastAmountSpent,
		&i.PaidCount,
		&i.RecurrencyType,
		&i.RecurrencyInterval,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
