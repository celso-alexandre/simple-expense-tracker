// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package query

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ExpensePlanCategory string

const (
	ExpensePlanCategoryFOOD          ExpensePlanCategory = "FOOD"
	ExpensePlanCategoryTRANSPORT     ExpensePlanCategory = "TRANSPORT"
	ExpensePlanCategoryPROPERTY      ExpensePlanCategory = "PROPERTY"
	ExpensePlanCategoryTAX           ExpensePlanCategory = "TAX"
	ExpensePlanCategoryENTERTAINMENT ExpensePlanCategory = "ENTERTAINMENT"
	ExpensePlanCategoryOTHER         ExpensePlanCategory = "OTHER"
)

func (e *ExpensePlanCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExpensePlanCategory(s)
	case string:
		*e = ExpensePlanCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for ExpensePlanCategory: %T", src)
	}
	return nil
}

type NullExpensePlanCategory struct {
	ExpensePlanCategory ExpensePlanCategory
	Valid               bool // Valid is true if ExpensePlanCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExpensePlanCategory) Scan(value interface{}) error {
	if value == nil {
		ns.ExpensePlanCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExpensePlanCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExpensePlanCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExpensePlanCategory), nil
}

type RecurrencyType string

const (
	RecurrencyTypeMONTHLY RecurrencyType = "MONTHLY"
	RecurrencyTypeYEARLY  RecurrencyType = "YEARLY"
)

func (e *RecurrencyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RecurrencyType(s)
	case string:
		*e = RecurrencyType(s)
	default:
		return fmt.Errorf("unsupported scan type for RecurrencyType: %T", src)
	}
	return nil
}

type NullRecurrencyType struct {
	RecurrencyType RecurrencyType
	Valid          bool // Valid is true if RecurrencyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRecurrencyType) Scan(value interface{}) error {
	if value == nil {
		ns.RecurrencyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RecurrencyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRecurrencyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RecurrencyType), nil
}

type ExpensePlan struct {
	ExpensePlanID      int32
	Title              string
	AmountPlanned      int32
	FirstPaymentDate   pgtype.Timestamptz
	LastPaymentDate    pgtype.Timestamptz
	LastPaidDate       pgtype.Timestamptz
	LastAmountSpent    int32
	PaidCount          int32
	RecurrencyType     NullRecurrencyType
	RecurrencyInterval int32
	Category           ExpensePlanCategory
	CreatedAt          pgtype.Timestamptz
	UpdatedAt          pgtype.Timestamptz
}

type ExpenseRecord struct {
	ExpenseRecordID       int32
	ExpensePlanID         int32
	AmountPaid            int32
	PaymentDate           pgtype.Timestamptz
	PaidDate              pgtype.Timestamptz
	ExpensePlanSequence   int32
	PreviousPaymentAmount pgtype.Int4
	PreviousPaymentDate   pgtype.Timestamptz
	CreatedAt             pgtype.Timestamptz
	UpdatedAt             pgtype.Timestamptz
}
